name: Snap Build

on:
  workflow_call: 
  pull_request: # Triggers the workflow on pull requests targeting the main branch
                # It ensures builds will happen for every PR.
    types: [opened, synchronize, reopened]
    branches:
      - main 
  push:
    branches:
      - main # Whenever a commit is pushed to main
    tags:
      - 'v*-rc*' # Whenever a new version tag is pushed

permissions:
  contents: write
  # pull-requests: write

jobs:
  build-and-publish:
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v4
      - name: Build snap
        id: build-snap
        uses: snapcore/action-build@v1
        env:
           SNAPCRAFT_BUILD_INFO: 1
           SNAPCRAFT_VERBOSITY_LEVEL: "verbose"
           # This action has a bug in which the UA token is not properly passed to the snapcraft command using the standard `ua-token` input.
           # This option is described here: https://github.com/canonical/action-build#ua-token
           # As a workaround, we currently set the SNAPCRAFT_UA_TOKEN environment variable directly.
           # Refer to the open issue: https://github.com/canonical/action-build/issues/83
           SNAPCRAFT_UA_TOKEN: ${{ secrets.SNAPCRAFT_UA_TOKEN }}
      - name: Upload snap artifact locally
        id: upload-snap
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build-snap.outputs.snap }}
          path: ${{ steps.build-snap.outputs.snap }}
      - name: Publish to Snap Store (edge channel)
        # This action publishes the built snap to the Snap Store in the edge channel
        # The original action https://github.com/snapcore/action-publish does not support retries when the upload to the store fails for any reason, so we implement a custom retry logic here.
        # If the 'snapcraft upload' command fails, it will retry the upload up to RETRY_LIMIT times, waiting RETRY_TIMEOUT seconds between each attempt.
        id: publish-snap
        env:
          # Snap Store credentials for authentication when accessing the Snap Store to publish snaps.
          # Refer to: https://documentation.ubuntu.com/snapcraft/latest/how-to/publishing/authenticate/
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}
          SNAP_FILE: ${{ steps.build-snap.outputs.snap }}
          SNAP_RELEASE: edge
          RETRY_LIMIT: 3
          RETRY_TIMEOUT: 30
        run: |
          attempt=0
          success=0
          while [ $attempt -lt $RETRY_LIMIT ]; do
            ((attempt++))
            echo " Uploading the snap to the store via channel '$SNAP_RELEASE'. Attempt # $attempt..."
            if snapcraft upload "$SNAP_FILE" --release "$SNAP_RELEASE"; then
              echo "Snap has been uploaded successfully to the store."
              success=1
              break
            else
              echo "Snap upload failed. Retrying in $RETRY_TIMEOUT seconds..."
              sleep $RETRY_TIMEOUT
            fi
          done

          if [ $success -ne 1 ]; then
            echo "Snap upload failed after $RETRY_LIMIT attempts."
            exit 1
          fi
      - name: Upload Snapcraft logs as an artifact
        id: upload-log
        uses: actions/upload-artifact@v4
        with:
          name: snapcraft-log
          path: /home/runner/.local/state/snapcraft/log/


  promote-rc:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '-rc')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Parse snapcraft.yaml
        id: snapcraft-yaml
        uses: snapcrafters/ci/parse-snapcraft-yaml@main
      - name: Install Snapcraft
        run: sudo snap install snapcraft --classic --channel=stable
      - name: Promote snap from edge -> candidate
        run: |
          #REV=$(snapcraft list-revisions ${{ steps.snapcraft-yaml.outputs.snap-name }} | awk '/edge/{print $1; exit}')
          yes | snapcraft promote ${{ steps.snapcraft-yaml.outputs.snap-name }} --from-channel edge --to-channel candidate
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}
          SNAPCRAFT_HAS_TTY: "true"


  promote-stable:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Parse snapcraft.yaml
        id: snapcraft-yaml
        uses: snapcrafters/ci/parse-snapcraft-yaml@main
      - name: Find last RC tag
        id: find-last-rc
        run: |
          TAG=$(git tag --list 'v*-rc*' --sort=-v:refname | head -n1)
          if [ -z "$TAG" ]; then
            echo "No RC tag found, skipping."
            exit 0
          fi
          STABLE_TAG=$(echo "$TAG" | sed -E 's/-rc[0-9]+$//')
          echo "rc_tag=$TAG" >> $GITHUB_OUTPUT
          echo "stable_tag=$STABLE_TAG" >> $GITHUB_OUTPUT
      - name: Create and push stable tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.find-last-rc.outputs.stable_tag }}
          git push origin ${{ steps.find-last-rc.outputs.stable_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.find-last-rc.outputs.stable_tag }}
          name: "Release ${{ steps.find-last-rc.outputs.stable_tag }}"
          body: Automatic release promoted from ${{ steps.find-last-rc.outputs.rc_tag }}.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Snapcraft
        run: sudo snap install snapcraft --classic --channel=stable
      - name: Promote snap from candidate -> stable
        run: |
          # REV=$(snapcraft list-revisions ${{ steps.snapcraft-yaml.outputs.snap-name }} | awk '/candidate/{print $1; exit}')
          snapcraft promote ${{ steps.snapcraft-yaml.outputs.snap-name }} --from-channel candidate --to-channel stable --yes
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}
      - name: Delete merged branch
        run: |
          # Recovering the branch name from merged PR
          BRANCH=$(gh pr list --state merged --base main --limit 1 --json headRefName -q '.[0].headRefName')          
          if [ -n "$BRANCH" ]; then
            echo "Deleting branch: $BRANCH"
            git push origin --delete "$BRANCH" || true
          else
            echo "No merged branch found to delete"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
