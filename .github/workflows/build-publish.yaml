name: Snap Build

on:
  pull_request: # Triggers the workflow on pull requests targeting the main branch
                # It ensures builds will happen for every PR.
    types: [opened, synchronize, reopened]
    branches:
      - main 
  push:
    branches:
      - main # Whenever a commit is pushed to main
    tags:
      - 'v*-rc*' # Whenever a new version tag is pushed

permissions:
  contents: write

jobs:
  build-and-publish:
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v4
      - name: Install Snapcraft and setup LXD
        id: prepare-env
        run: |
          sudo iptables -P FORWARD ACCEPT
          sudo snap install --channel stable --classic snapcraft
          sudo snap install lxd
          sudo lxd init --auto
          sudo usermod -aG lxd $USER
      - name: Build snap and prepare the artifact for upload
        id: build-snap
        run: |
          newgrp lxd <<EOB
            snapcraft
          EOB
          SNAP_FILE=$(ls ./*.snap | head -n 1)
          echo "snap=$SNAP_FILE" >> $GITHUB_OUTPUT
      - name: Upload snap artifact locally
        id: upload-snap
        uses: actions/upload-artifact@v4
        with:
          name: esc-komatsu-ptxd-snap
          path: ${{ steps.build-snap.outputs.snap }}
      - name: Publish to Snap Store (edge)
        uses: snapcore/action-publish@v1
        env:
            SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}
        with:
          snap: ${{ steps.build-snap.outputs.snap }}
          release: edge

  promote-rc:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '-rc')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Parse snapcraft.yaml
        id: snapcraft-yaml
        uses: snapcrafters/ci/parse-snapcraft-yaml@main
      - name: Install Snapcraft
        run: sudo snap install snapcraft --classic --channel=stable
      - name: Promote snap from edge -> candidate
        run: |
          #REV=$(snapcraft list-revisions ${{ steps.snapcraft-yaml.outputs.snap-name }} | awk '/edge/{print $1; exit}')
          yes | snapcraft promote ${{ steps.snapcraft-yaml.outputs.snap-name }} --from-channel edge --to-channel candidate
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}
          SNAPCRAFT_HAS_TTY: "true"


  promote-stable:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Parse snapcraft.yaml
        id: snapcraft-yaml
        uses: snapcrafters/ci/parse-snapcraft-yaml@main
      - name: Find last RC tag
        id: find-last-rc
        run: |
          TAG=$(git tag --list 'v*-rc*' --sort=-v:refname | head -n1)
          if [ -z "$TAG" ]; then
            echo "No RC tag found, skipping."
            exit 0
          fi
          STABLE_TAG=$(echo "$TAG" | sed -E 's/-rc[0-9]+$//')
          echo "rc_tag=$TAG" >> $GITHUB_OUTPUT
          echo "stable_tag=$STABLE_TAG" >> $GITHUB_OUTPUT
      - name: Create and push stable tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.find-last-rc.outputs.stable_tag }}
          git push origin ${{ steps.find-last-rc.outputs.stable_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.find-last-rc.outputs.stable_tag }}
          name: "Release ${{ steps.find-last-rc.outputs.stable_tag }}"
          body: Automatic release promoted from ${{ steps.find-last-rc.outputs.rc_tag }}.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Snapcraft
        run: sudo snap install snapcraft --classic --channel=stable
      - name: Promote snap from candidate -> stable
        run: |
          # REV=$(snapcraft list-revisions ${{ steps.snapcraft-yaml.outputs.snap-name }} | awk '/candidate/{print $1; exit}')
          snapcraft promote ${{ steps.snapcraft-yaml.outputs.snap-name }} --from-channel candidate --to-channel stable --yes
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}

