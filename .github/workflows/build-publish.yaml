name: Snap Build

# on:
#  push:
#    branches:
#      - teste10

on:
  pull_request: # Triggers the workflow on pull requests targeting the main branch
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main # Whenever a commit is pushed to main
    tags:
      - 'v*-rc*' # Whenever a new version tag is pushed

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v4
      - name: Install Snapcraft and setup LXD
        id: prepare-env
        run: |
          sudo iptables -P FORWARD ACCEPT
          sudo snap install --channel stable --classic snapcraft
          sudo snap install lxd
          sudo lxd init --auto
          sudo usermod -aG lxd $USER
      - name: Build snap and prepare the artifact for upload
        id: build-snap
        run: |
          newgrp lxd <<EOB
            snapcraft
          EOB
          SNAP_FILE=$(ls ./*.snap | head -n 1)
          echo "snap=$SNAP_FILE" >> $GITHUB_OUTPUT
      - name: Upload snap artifact locally
        id: upload-snap
        uses: actions/upload-artifact@v4
        with:
          name: esc-komatsu-ptxd-snap
          path: ${{ steps.build-snap.outputs.snap }}
      - name: Publish to Snap Store (edge)
        uses: snapcore/action-publish@v1
        env:
            SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}
        with:
          snap: ${{ steps.build-snap.outputs.snap }}
          release: edge

  promote-snap:
    #if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    # needs: build-and-publish
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Find and parse snapcraft.yaml
        id: snapcraft-yaml
        uses: snapcrafters/ci/parse-snapcraft-yaml@main
      - name: Install Snapcraft
        run: |
          sudo snap install snapcraft --classic --channel=stable
      - name: Determine promotion channel
        id: set-channel
        run: |
          if [[ "${{ github.ref }}" =~ ^refs/tags/v.*-rc[0-9]+$ ]]; then
            echo "from_channel=edge" >> $GITHUB_OUTPUT
            echo "to_channel=candidate" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "from_channel=candidate" >> $GITHUB_OUTPUT
            echo "to_channel=stable" >> $GITHUB_OUTPUT
          else
            echo "from_channel=unknown" >> $GITHUB_OUTPUT
            echo "to_channel=unknown" >> $GITHUB_OUTPUT
          fi
      - name: Get snap revision
        id: get-revision
        run: | 
          REV=$(snapcraft list-revisions ${{ steps.snapcraft-yaml.outputs.snap-name }} | awk '/${{ steps.set-channel.outputs.from_channel }}/{print $1; exit}')
          echo "revision=$REV" >> $GITHUB_ENV
      - name: Promote snap
        id: promote-snap
        run: |
          if [[ "${{ steps.set-channel.outputs.from_channel }}" != "unknown" ]]; then
            snapcraft release ${{ steps.snapcraft-yaml.outputs.snap-name }} ${{ steps.get-revision.outputs.revision }} ${{ steps.set-channel.outputs.to_channel }}
          else
            echo "Not a promotion event, skipping snap promotion."
          fi

        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}